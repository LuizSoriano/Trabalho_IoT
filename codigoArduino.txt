#define ENABLE_USER_AUTH
#define ENABLE_DATABASE

#include "DHT.h"
#include <Arduino.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <FirebaseClient.h>

// Wifi
#define WIFI_SSID "MARDEM"
#define WIFI_PASSWORD "12042004mardem"
// Credenciais Firebase
#define Web_API_KEY "AIzaSyBtMCMn03EFZFhrrppsRA69g_6awF7F0b8"
#define DATABASE_URL "https://projetoiot-cd352-default-rtdb.firebaseio.com/"
#define USER_EMAIL "mardem@gmail.com"
#define USER_PASS "12345678"

// User function
void processData(AsyncResult &aResult);

// Authentication
UserAuth user_auth(Web_API_KEY, USER_EMAIL, USER_PASS);

// Firebase components
FirebaseApp app;
WiFiClientSecure ssl_client;
using AsyncClient = AsyncClientClass;
AsyncClient aClient(ssl_client);
RealtimeDatabase Database;

// Timer variables for sending data every 10 seconds
unsigned long lastSendTime = 0;
const unsigned long sendInterval = 10000; // 10 seconds in milliseconds

#define DHTPIN 13     // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11   // DHT 11
DHT dht(DHTPIN, DHTTYPE);

#define SENSORSOIL 12

void setup() {
  Serial.begin(9600);

  // Connect to Wi-Fi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }
  Serial.println();

  // Configure SSL client
  ssl_client.setInsecure();
  ssl_client.setConnectionTimeout(1000);
  ssl_client.setHandshakeTimeout(5);
  
  // Initialize Firebase
  initializeApp(aClient, app, getAuth(user_auth), processData, "üîê authTask");
  app.getApp<RealtimeDatabase>(Database);
  Database.url(DATABASE_URL);

  dht.begin();
}

void loop() {

  app.loop();

  if (app.ready()){ 
    // Periodic data sending every 10 seconds
    unsigned long currentTime = millis();
    if (currentTime - lastSendTime >= sendInterval){
      // Update the last send time
      lastSendTime = currentTime;

      float sensor_value = analogRead(SENSORSOIL);
      Database.set<float>(aClient, "/umidade/solo", sensor_value, processData, "Send_umidade_solo");

      float h = dht.readHumidity();
      float t = dht.readTemperature();
      // float f = dht.readTemperature(true);

      if (isnan(h) || isnan(t)) {
        Serial.println(F("Failed to read from DHT sensor!"));
        return;
      }

      // float hif = dht.computeHeatIndex(f, h);
      float hic = dht.computeHeatIndex(t, h, false);

      Database.set<float>(aClient, "/umidade/ar", h, processData, "Send_umidade_ar");
      Database.set<float>(aClient, "/temperatura/ar", t, processData, "Send_temperatura_ar");
      Database.set<float>(aClient, "/temperatura/indice_calor", hic, processData, "Send_indice_calor");

    }
  }
  
  float sensor_value = analogRead(SENSORSOIL);
  // Serial.println();
  // Serial.print("Umidade do solo: ");
  // Serial.println(sensor_value);


  float h = dht.readHumidity();
  float t = dht.readTemperature();
  // float f = dht.readTemperature(true);

  if (isnan(h) || isnan(t)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  float hic = dht.computeHeatIndex(t, h, false);

  // Serial.print(F("Umidade do ar: "));
  // Serial.print(h);
  // Serial.print(F("%  Temperatura do ar: "));
  // Serial.print(t);
  // Serial.print(F("¬∞C "));
  // Serial.print(F(" √çndice de calor: "));
  // Serial.print(hic);
  // Serial.print(F("¬∞C "));
}

void processData(AsyncResult &aResult) {
  if (!aResult.isResult())
    return;

  if (aResult.isEvent())
    Firebase.printf("Event task: %s, msg: %s, code: %d\n", aResult.uid().c_str(), aResult.eventLog().message().c_str(), aResult.eventLog().code());

  if (aResult.isDebug())
    Firebase.printf("Debug task: %s, msg: %s\n", aResult.uid().c_str(), aResult.debug().c_str());

  if (aResult.isError())
    Firebase.printf("Error task: %s, msg: %s, code: %d\n", aResult.uid().c_str(), aResult.error().message().c_str(), aResult.error().code());

  if (aResult.available())
    Firebase.printf("task: %s, payload: %s\n", aResult.uid().c_str(), aResult.c_str());
}